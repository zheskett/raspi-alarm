# Test generated by ChatGPT


# SPI wiring (SPI0 CE0):
#  SCK -> GPIO11 (Pin 23)  MOSI -> GPIO10 (Pin 19)  CS -> GPIO8/CE0 (Pin 24)
#  DC  -> GPIO25 (Pin 22)  RST  -> GPIO24 (Pin 18)  VCC -> 3V3  GND -> GND

import time

import spidev
from gpiozero import DigitalOutputDevice
from PIL import Image, ImageDraw, ImageFont

WIDTH, HEIGHT = 128, 64
PAGES = HEIGHT // 8
SPI_BUS, SPI_DEV, SPI_HZ = 0, 0, 8_000_000
DC_GPIO, RST_GPIO = 25, 24

spi = spidev.SpiDev()
spi.open(SPI_BUS, SPI_DEV)
spi.max_speed_hz = SPI_HZ
spi.mode = 0
dc = DigitalOutputDevice(DC_GPIO, initial_value=False)
rst = DigitalOutputDevice(RST_GPIO, initial_value=True)


def cmd(*vals):
    dc.off()
    spi.writebytes2(bytes(v & 0xFF for v in vals))


def data(buf):
    dc.on()
    spi.writebytes2(buf if isinstance(buf, (bytes, bytearray)) else bytes(buf))


def reset():
    rst.on()
    time.sleep(0.01)
    rst.off()
    time.sleep(0.01)
    rst.on()
    time.sleep(0.05)


def init_ssd1306():
    # Recommended init for 128x64 with internal charge pump
    cmd(0xAE)  # display off
    cmd(0xD5, 0x80)  # clock divide
    cmd(0xA8, HEIGHT - 1)  # multiplex ratio
    cmd(0xD3, 0x00)  # display offset
    cmd(0x40)  # start line = 0
    cmd(0x8D, 0x14)  # charge pump ON (internal VCC)
    cmd(0x20, 0x00)  # memory mode: horizontal addressing
    cmd(0xA1)  # segment remap (mirror X)
    cmd(0xC8)  # COM scan dec (mirror Y)
    cmd(0xDA, 0x12)  # COM pins (128x64)
    cmd(0x81, 0x7F)  # contrast (will tweak later)
    cmd(0xD9, 0xF1)  # pre-charge period (hi for internal VCC)
    cmd(0xDB, 0x40)  # VCOMH deselect
    cmd(0xA4)  # display follows RAM
    cmd(0xA6)  # normal (not inverted)
    cmd(0x2E)  # stop scroll
    cmd(0xAF)  # display on


# ---- tuning knobs (datasheet) ----
def set_contrast(val):  # 0..255 (brightness step)
    cmd(
        0x81, max(0, min(255, val))
    )  # Set Contrast Control. :contentReference[oaicite:1]{index=1}


def set_precharge(p1, p2):  # each nibble 1..15 → affects brightness/ghosting
    cmd(
        0xD9, ((p2 & 0x0F) << 4) | (p1 & 0x0F)
    )  # Set Pre-charge Period. :contentReference[oaicite:2]{index=2}


def set_vcomh(level):  # 0x00 (~0.65*Vcc), 0x20 (~0.77*Vcc), 0x30 (~0.83*Vcc)
    cmd(
        0xDB, level & 0x30
    )  # Set VCOMH Deselect Level. :contentReference[oaicite:3]{index=3}


def enable_charge_pump():  # must be on for “internal VCC” modules
    cmd(
        0x8D, 0x14
    )  # Charge Pump Setting: enable. :contentReference[oaicite:4]{index=4}


def set_scan(direction="dec"):  # 'dec'->0xC8, 'inc'->0xC0
    cmd(
        0xC8 if direction == "dec" else 0xC0
    )  # COM scan dir. :contentReference[oaicite:5]{index=5}


def set_window_full():
    cmd(0x21, 0, WIDTH - 1)  # COLUMNADDR  (0..127)
    cmd(0x22, 0, PAGES - 1)  # PAGEADDR    (0..7). :contentReference[oaicite:6]{index=6}


# ---- profiles you can toggle at runtime ----
def profile_max():
    enable_charge_pump()
    set_precharge(0x02, 0x0F)  # aggressive pre-charge (bright)
    set_vcomh(0x40)  # higher deselect
    set_contrast(0xCF)  # strong


def profile_default():
    enable_charge_pump()
    set_precharge(0x02, 0x02)  # ~datasheet default
    set_vcomh(0x20)  # ~default
    set_contrast(0x7F)


def profile_dim():
    enable_charge_pump()
    set_precharge(0x02, 0x02)
    set_vcomh(0x20)  # lower black level
    set_contrast(0x00)


# ---- Pillow → SSD1306 pack (vertical LSB) ----
def to_pages(img):
    if img.size != (WIDTH, HEIGHT):
        img = img.resize((WIDTH, HEIGHT), Image.Resampling.NEAREST)
    mono = img.convert("1")
    pix = mono.load()
    buf = bytearray(WIDTH * PAGES)
    i = 0
    for page in range(PAGES):
        for x in range(WIDTH):
            b = 0
            for bit in range(8):
                y = page * 8 + bit
                if pix[x, y] != 0:
                    b |= 1 << bit
            buf[i] = b
            i += 1
    return buf


def push_image(img):
    set_window_full()
    data(to_pages(img))


if __name__ == "__main__":
    reset()
    init_ssd1306()

    # Try flipping scan to see if “dark edge” swaps sides:
    # set_scan("inc")  # uncomment to test (0xC0 vs our default 0xC8). :contentReference[oaicite:7]{index=7}

    # Pick a brightness profile:
    profile_dim()  # try: profile_default() or profile_dim()

    # Draw with Pillow
    font = ImageFont.load_default()
    img = Image.new("1", (WIDTH, HEIGHT), 0)
    d = ImageDraw.Draw(img)
    d.rectangle((0, 0, WIDTH - 1, HEIGHT - 1), outline=1, fill=0)
    d.line((0, HEIGHT // 2, WIDTH, HEIGHT // 2), fill=1)
    d.line((WIDTH // 2, 0, WIDTH // 2, HEIGHT), fill=1)
    d.text((6, 6), "SSD1306 + Pillow", fill=1, font=font)
    d.text((6, 20), "profiles & scan", fill=1, font=font)
    push_image(img)
    time.sleep(2.0)

    # Checkerboard (good for uniformity tests)
    img2 = Image.new("1", (WIDTH, HEIGHT), 0)
    d2 = ImageDraw.Draw(img2)
    step = 8
    for y in range(0, HEIGHT, step):
        for x in range(0, WIDTH, step):
            if ((x // step) + (y // step)) % 2 == 0:
                d2.rectangle((x, y, x + step - 1, y + step - 1), fill=1)
    push_image(img2)

    time.sleep(3.0)

    # Turn the panel OFF (sleep)
    cmd(0xAE)  # Display OFF

    # (Optional) cut the internal charge pump to save a bit more power
    cmd(0x8D, 0x10)  # Charge Pump disable (only after Display OFF)

    spi.close()
    dc.close()
    rst.close()
